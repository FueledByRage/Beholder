name: Deploy Release

on:
  push:
    branches:
      - release

jobs:
  unit-test:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Set permission on gradlew
        run: chmod +x ./gradlew

      - name: Run Tests
        run: ./gradlew test

      - name: Build Project
        run: ./gradlew build

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs/*.jar

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: unit-test

    steps:
      - name: Download built JAR
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: .

      - name: Send JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "*.jar"
          target: "/tmp/"

      - name: Deploy app on EC2
        uses: appleboy/ssh-action@master
        env:
          DEBUG: true
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Função de log para melhor debug
            log() {
              echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
            }
            
            log "=== Parando aplicação se estiver rodando ==="
            # Usando redirecionamento para suprimir mensagens de erro
            pkill -f 'java -jar' > /dev/null 2>&1 || true
            
            log "=== Verificando diretório /tmp ==="
            ls -la /tmp/*.jar || log "Nenhum JAR encontrado em /tmp"
            
            log "=== Buscando JAR ==="
            JAR_COUNT=$(ls /tmp/*.jar 2>/dev/null | wc -l)
            
            if [ "$JAR_COUNT" -eq "0" ]; then
              log "ERRO: Nenhum arquivo JAR encontrado em /tmp"
              exit 1
            fi
            
            JAR_NAME=$(ls /tmp/*.jar | head -n1)
            log "JAR encontrado: $JAR_NAME"
            
            log "=== Movendo JAR para ~/app.jar ==="
            mv "$JAR_NAME" ~/app.jar
            
            log "=== Verificando se o arquivo foi movido ==="
            if [ ! -f ~/app.jar ]; then
              log "ERRO: Falha ao mover o arquivo JAR"
              exit 1
            fi
            
            log "=== Iniciando aplicação ==="
            cd ~
            nohup java -jar app.jar > app.log 2>&1 &
            
            # Verificar se o processo foi iniciado
            sleep 2
            if pgrep -f "java -jar app.jar" > /dev/null; then
              log "Aplicação iniciada com sucesso"
            else
              log "ERRO: Falha ao iniciar a aplicação"
              # Mostrar os últimos logs para debug
              tail ~/app.log
              exit 1
            fi
          
