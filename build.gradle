plugins {
	id 'java'
	id 'org.springframework.boot' version '2.2.6.RELEASE'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.beholder'
version = '0.0.1-SNAPSHOT'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'io.micrometer:micrometer-core'
	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-webflux' 
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.mapstruct:mapstruct:1.6.3'
  annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
}


tasks.named('test') {
	useJUnitPlatform()
}

task migrateAndRun {
    group = 'application'
    description = 'Executa a migração e inicia a aplicação.'

    doLast {
        def migrationScript = './scripts/migrations.sh'

        println 'Executando script de migração...'
        def process = new ProcessBuilder('bash', '-c', migrationScript)
            .inheritIO()
            .start()

        def exitCode = process.waitFor()
        if (exitCode != 0) {
            throw new GradleException("Erro ao executar a migração! Código de saída: $exitCode")
        }
    }
}

task bootRunApp(type: Exec) {
    group = 'application'
    description = 'Inicia a aplicação após a migração.'
    commandLine 'gradle', 'bootRun'
}

bootRunApp.mustRunAfter migrateAndRun

task migrateAndRunAll {
    dependsOn migrateAndRun, bootRunApp
    group = 'application'
    description = 'Executa a migração e inicia a aplicação em sequência.'
}


task dockerComposeUp(type: Exec) {
    group = 'docker'
    description = 'Inicia os serviços definidos no docker-compose.local.yml'
    commandLine 'docker', 'compose', '-f', 'docker-compose.local.yml', 'up', '-d'
}

task dockerComposeDown(type: Exec) {
    group = 'docker'
    description = 'Encerra os serviços do docker-compose.local.yml'
    commandLine 'docker', 'compose', '-f', 'docker-compose.local.yml', 'down'
}
